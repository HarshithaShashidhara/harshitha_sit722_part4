#
# Creates a managed Kubernetes cluster (AKS) on Azure.
#
resource "azurerm_kubernetes_cluster" "cluster" {
    name                = var.app_name                       # Name of the Kubernetes cluster, dynamically taken from a variable.
    location            = var.location                       # Location/region for the cluster, fetched from a variable.
    resource_group_name = azurerm_resource_group.sit722weektask04.name  # Resource group that holds the Kubernetes cluster.
    dns_prefix          = var.app_name                       # DNS prefix for the Kubernetes cluster, taken from the app name.
    kubernetes_version  = var.kubernetes_version             # Version of Kubernetes to use for the cluster (fetched from a variable).

    # Defines the default node pool for the Kubernetes cluster
    default_node_pool {
        name            = "default"                          # Name of the node pool.
        node_count      = 1                                  # Number of nodes in the default node pool (adjust as per your needs).
        vm_size         = "Standard_B2s"                     # VM size for each node (adjust based on your application requirements).
        enable_auto_scaling = true                           # Optional: Enable auto-scaling for the node pool.
        min_count       = 1                                  # Minimum node count for auto-scaling.
        max_count       = 3                                  # Maximum node count for auto-scaling.
        os_disk_size_gb = 30                                 # Optional: Set the OS disk size for each node.
    }

    # Define the identity for the AKS cluster.
    # Using system-assigned managed identity to avoid manual service principal management.
    identity {
        type = "SystemAssigned"                              # System-assigned managed identity automatically generated by Azure.
    }

    # Optional: Configure the network profile
    # This allows you to define network plugin, policies, and address ranges.
    network_profile {
        network_plugin    = "azure"                          # Using Azure CNI for advanced networking (or choose "kubenet").
        load_balancer_sku = "Standard"                       # Standard SKU load balancer for better performance and scalability.
        network_policy    = "calico"                         # Optional: Enabling Calico for network policies.
    }

    # Enabling RBAC for the AKS cluster
    role_based_access_control {
        enabled = true                                       # Role-based access control (RBAC) is enabled by default.
    }

    # Optional: Adding tags to organize resources.
    tags = {
        environment = "dev"                                  # Environment tag for development purposes.
        project     = var.project_name                       # Tag the project name (fetched from a variable).
    }
}

#
# Attaches the Azure Container Registry (ACR) to the AKS cluster.
# This allows Kubernetes to pull images directly from the container registry.
#
resource "azurerm_role_assignment" "role_assignment" {
    principal_id                     = azurerm_kubernetes_cluster.cluster.kubelet_identity[0].object_id  # The identity of the kubelet (node agent) used for pulling images.
    role_definition_name             = "AcrPull"            # Assign the AcrPull role to allow AKS to pull images from ACR.
    scope                            = azurerm_container_registry.container_registry.id  # Scope is limited to the container registry.
    skip_service_principal_aad_check = true                 # Skip the AAD check for the service principal.
}

#
# Optional: Output the Kubernetes cluster's credentials for easy reference.
# This can help you get the `kubeconfig` file to connect to the AKS cluster.
#
output "kube_config" {
    value = azurerm_kubernetes_cluster.cluster.kube_config_raw
    sensitive = true                                         # Mark as sensitive to hide the output from logs.
}

#
# Optional: Set up a Log Analytics workspace to monitor the AKS cluster.
# This will provide insights and logs from the cluster for better observability.
#
resource "azurerm_log_analytics_workspace" "aks_logging" {
    name                = "${var.app_name}-log-workspace"     # Name for the log workspace, combining the app name for easy identification.
    location            = var.location                        # Same location as the cluster for consistency.
    resource_group_name = azurerm_resource_group.sit722weektask04.name  # Use the same resource group.
    sku                 = "PerGB2018"                         # Pricing tier for the workspace (adjust based on your logging needs).

    # Optional: Tags for easier resource management.
    tags = {
        environment = "dev"
        project     = var.project_name
    }
}

#
# Optional: Link the Log Analytics workspace to the Kubernetes cluster for advanced monitoring.
#
resource "azurerm_kubernetes_cluster_extension" "monitoring" {
  name                 = "omsagent"
  kubernetes_cluster_id = azurerm_kubernetes_cluster.cluster.id   # Attach to the AKS cluster.
  extension_type       = "AzureMonitor"                           # Enables monitoring through Azure Monitor.
  auto_upgrade_minor_version = true                               # Automatically upgrade to the latest minor version.

  configuration_settings = {
    log_analytics_workspace_resource_id = azurerm_log_analytics_workspace.aks_logging.id  # Reference to the log analytics workspace.
  }
}
